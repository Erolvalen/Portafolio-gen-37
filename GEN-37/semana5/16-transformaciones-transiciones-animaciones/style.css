:root {
	color-scheme: light dark;

	--bg-principal: light-dark(#ccc, #111);
	--color-principal: light-dark(#111, #ccc);
}

html {
	box-sizing: border-box;
	*,
	*::before,
	*::after {
		box-sizing: inherit;
	}

	body {
		background-color: var(--bg-principal);
		color: var(--color-principal);
		font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI',
			Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue',
			sans-serif;
		margin: 0;
		ul {
			list-style: none;
			margin: 0;
			padding: 0;
		}
		img {
			max-width: 100%;
			height: auto;
			display: block;
			margin: 0 auto;
		}

		h1,
		p,
		section h2,
		section p,
		article h3 {
			padding: 0 2rem;
		}
	}
}

.container {
	margin: 0 auto;
	width: 500px;
	height: 500px;
	border: 2px solid;
	.container__child {
		width: 100px;
		height: 100px;
		background-color: blueviolet;
		cursor: pointer;
		/* transition: 1s; */
	}
}

/* Translate  */
.translate {
	&:hover {
		/* transform: none; */

		/* transform: translateX(200px);
		transform: translateY(100%); */
		/* shorthand  */
		/* x | y  */
		/* transform: translate(200px, 100%); */

		/* nueva forma, llegó en 2023  */
		/* x | y  */
		translate: -200px -100%;
	}
}

/* Rotate  */
/* 
Los valores que utiliza son las siguientes medidas:
-grados: 0-360deg
-radians:0-6.28319rad
-gradians: 0-400grad
-turn: 0-1turn /* Se pueden usar valores como 0.5turn 0.25turn 1.5turn 2turn 2.75turn y así sucecivamente
*/
.rotate {
	&:hover {
		/* transform: rotate(25deg);
		transform: rotate(-25deg);
		transform: rotate(1turn);
		transform: rotate(-1turn);
		transform: rotate(360deg);
		transform: rotate(-360deg); */
		rotate: 25deg;
	}
}

/* .Scale  */
.scale {
	&:hover {
		/* transform: scale(1);
		transform: scaleX(2);
		transform: scaleX(3);
		transform: scaleX(0.5);*/
		/* transform: scaleX(2);
		transform: scaleY(2); */
		/* shorthand  */
		/* x | y  */
		/* transform: scale(2, 3); */
		/* scale: 2; */
		scale: 2 3;
	}
}

/* Skew */
/* 
Los valores que utiliza son las siguientes medidas:
-grados: 0-360deg
-radians:0-6.28319rad
-gradians: 0-400grad
-turn: 0-1turn /* Se pueden usar valores como 0.5turn 0.25turn 1.5turn 2turn 2.75turn y así sucecivamente
*/
.skew {
	&:hover {
		/* transform: skewX(80deg);
		transform: skewY(80deg);
		transform: skewY(1turn);
		transform: skewY(360deg); */
		/* x | y  */
		transform: skew(10deg, 1turn);
	}
}

/* Combinando métodos de transform  */
.mixing {
	&:hover {
		transform: scale(2) rotate(25deg) translate(100px) skew(10deg, 25deg);
	}
}

/* Transform Origin  */
.origin {
	&:hover {
		rotate: 50deg;
		transform-origin: center bottom;
		transform-origin: center top;
		transform-origin: top right;
		transform-origin: bottom right;
	}
}

/* Transiciones  */
.background {
	transition: background-color 0.3s;
	&:hover {
		background-color: aqua;
	}
}

/* Transition Property y Duration  */
.container--color {
	transition-property: color, scale;
	transition-duration: 0.3s, 0.5s;
	&:hover {
		color: green;
		scale: 2;
	}
}

/* Transition Timing Function  */
.container--function {
	transition-property: background-color, scale;
	transition-duration: 0.3s, 0.5s;

	/* EASE  AUMENTA LA VELOCIDAD A LA MITAD DE LA TANSICIÓN */
	transition-timing-function: ease;
	/* ease-in, comienza lento y termina rápido   */
	transition-timing-function: ease-in;
	/* ease-out, comienza rápido y termina lento  */
	transition-timing-function: ease-out;
	/* ease-in.out, comienzalento, acelera y termina lento  */
	transition-timing-function: ease-in-out;
	/*stepts ()
 uno decide la aceleración mediante pasos  */
	transition-timing-function: steps(5);

	/* cubic-bazier es un curviacelerador personalizado  */
	/* https://cubic-bezier.com/#.17,.67,.83,.67  */
	transition-timing-function: cubic-bezier(0.47, 0.5, 0, -1.17);

	&:hover {
		background-color: yellowgreen;
		scale: 0.5;
	}
}

/* Transition Delay  */
.container--delay {
	/* transition-property: background-color, color;
	transition-duration: 0.3s, 0.6s;
	transition-timing-function: ease-in-out, ease-in;
	transition-delay: 1s, 0.3s; */

	/* shorthand  */
	/* transition: property duration timing-function delay ; */
	transition: background-color 0.3s ease-in-out 1s, color 0.6s ease-in 0.3s;

	&:hover {
		background-color: rgb(50, 153, 205);
		color: brown;
	}
}

/* Juguemos con lo aprendido */
.carrito {
	background-color: gray;
	width: 100%;
	height: 300px;
	padding: 0.1px;
	.carrito__avanzar {
		background-color: #ccc;
		color: #111;
		text-decoration: none;
		padding: 1rem;
		border-radius: 1rem;
	}
	.carrito__img {
		margin: 100px 0 0 0;
		transition: translate 2s;
		&:target {
			translate: 800px;
		}
	}
}

/* Animaciones */
.carrito__azul {
	margin: 100px 0 0 0;
	animation: avanzar 3s linear infinite alternate,
		changeShadow 2s linear infinite;
	&:hover {
		animation-play-state: paused;
		cursor: progress;
	}
}

@keyframes avanzar {
	/* 0% {
		translate: 0px;
	}
	30% {
		translate: 150px;
	}
	70% {
		translate: 400px;
	}
	100% {
		translate: 800px;
	} */
	/* from {
		translate: 0px;
	} */
	/* to {
		translate: 800px;
	} */
	100% {
		translate: 800px;
	}
}

@keyframes changeShadow {
	0% {
		filter: drop-shadow(0px 0px 15px blueviolet);
	}
	10% {
		filter: drop-shadow(0px 0px 15px rgb(43, 150, 226));
	}
	20% {
		filter: drop-shadow(0px 0px 15px rgb(43, 226, 134));
	}
	30% {
		filter: drop-shadow(0px 0px 15px rgb(141, 226, 43));
	}
	40% {
		filter: drop-shadow(0px 0px 15px rgb(226, 189, 43));
	}
	50% {
		filter: drop-shadow(0px 0px 15px rgb(226, 101, 43));
	}
	60% {
		filter: drop-shadow(0px 0px 15px rgb(226, 43, 43));
	}
	70% {
		filter: drop-shadow(0px 0px 15px rgb(49, 48, 50));
	}
	80% {
		filter: drop-shadow(0px 0px 15px rgb(0, 0, 0));
	}
	90% {
		filter: drop-shadow(0px 0px 15px rgb(255, 255, 255));
	}
	100% {
		filter: drop-shadow(0px 0px 15px rgb(226, 43, 220));
	}
}

/* 
-animation-name: nombre de la animación
-animation-duration: duración de la animación en segundos o milisegundos.
-animation-timing-function: aceleración de la animación
-animation-delay: define cuánto tiempo tardará en iniciar la animación
-animation-iteration-count: las veces que se va a repetir la animación o si será infinita (números|infinite)
-animation-direction: desde dónde va a partir la animación reverse, alternate (normal|reverse|alternate|alternate-reverse)
-animation-fill-mode: le dice al navegador si queremos que los estilos en el 100% se queden o no (backwars|normal|forwards|both)
-animation-play-state: permite pausar o detener la animación, suele usarse con hover (running|paused) 
EL ORDEN ES EL SIGUIENTE:
animation: [animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction] [animation-fill-mode] [animation-play-state]; 
*/
